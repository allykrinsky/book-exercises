spread(
key = type_of_drinking,
value = rates
)
state_drinking_by_year <- state_drinking_by_year %>%
mutate(
non_binge_both = any_both_sexes - binge_both_sexes,
non_binge_male = any_males - binge_males,
non_binge_fem = any_females - binge_females
)
state_drinking_by_year$state <- paste(state_drinking_by_year$state, state_drinking_by_year$year)
View(state_drinking_by_year)
state_drinking_by_year <- state_drinking_by_year[ ,-c(2)]
View(state_drinking_by_year)
nrow(state_drinking_by_year)
ncol(state_drinking_by_year)
state_drinking_by_year <- states_only %>%
gather(
key = type_and_year,
value = rates,
any_both_sexes_2002:binge_males_2012
) %>%
select(any_state, type_and_year, rates) %>%
mutate(year = type_and_year)
colnames(state_drinking_by_year) <- c("state", "type_of_drinking", "rates", "year")
state_drinking_by_year$year <- substr(state_drinking_by_year$year, nchar(state_drinking_by_year$year)-3, nchar(state_drinking_by_year$year))
state_drinking_by_year$type_of_drinking <- substr(state_drinking_by_year$type_of_drinking, 1, nchar(state_drinking_by_year$type_of_drinking)-5)
state_drinking_by_year <- state_drinking_by_year %>%
spread(
key = type_of_drinking,
value = rates
)
state_drinking_by_year$state <- paste(state_drinking_by_year$state, state_drinking_by_year$year)
state_drinking_by_year <- state_drinking_by_year[ ,-c(2)]
View(state_drinking_by_year)
ncol(state_drinking_by_year)
state_drinking_by_year <- states_only %>%
gather(
key = type_and_year,
value = rates,
any_both_sexes_2002:binge_males_2012
) %>%
select(any_state, type_and_year, rates) %>%
mutate(year = type_and_year)
colnames(state_drinking_by_year) <- c("state", "type_of_drinking", "rates", "year")
state_drinking_by_year$year <- substr(state_drinking_by_year$year, nchar(state_drinking_by_year$year)-3, nchar(state_drinking_by_year$year))
state_drinking_by_year$type_of_drinking <- substr(state_drinking_by_year$type_of_drinking, 1, nchar(state_drinking_by_year$type_of_drinking)-5)
state_drinking_by_year <- state_drinking_by_year %>%
spread(
key = type_of_drinking,
value = rates
)
View(state_drinking_by_year)
ncol(state_drinking_by_year)
nrow(state_drinking_by_year)
write.csv(state_drinking_by_year, "data/state_drinking_per_year.csv")
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
#install.packages("tidyr")
#install.packages("ggplot2")
library("tidyr")
library("dplyr")
library("ggplot2")
setwd("~/Desktop/bookex/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = FALSE)
View(avocados)
avocados <- avocados %>%
mutate(Date = as.Date(Date))
names(avocados)[names(avocados) == 'X4046'] <- 'small_haas'
names(avocados)[names(avocados) == 'X4225'] <- 'large_haas'
names(avocados)[names(avocados) == 'X4770'] <- 'xlarge_haas'
avocados$other_avos <- avocados$Total.Volume - (avocados$small_haas + avocados$large_haas + avocados$xlarge_haas)
by_size <- data.frame(Date = avocados$Date, small_haas = avocados$small_haas, large_haas = avocados$large_haas, xlarge_haas = avocados$xlarge_haas, other_avos = avocados$other_avos)
View(by_size)
by_size <- data.frame(Date = avocados$Date, small_haas = avocados$small_haas, large_haas = avocados$large_haas, xlarge_haas = avocados$xlarge_haas, other_avos = avocados$other_avos)
View(by_size)
by_size <- avocados %>%
select(Date, other_avos, small_haas, large_haas, xlarge_haas)
View(by_size)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
by_size <- by_size %>%
gather(
key = type_of_avo,
value = size,
other_avos, small_haas, large_haas, xlarge_haas
)
View(by_size)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- by_size %>%
gather(
key = type_of_avo,
value = size,
other_avos, small_haas, large_haas, xlarge_haas
)
by_size <- avocados %>%
select(Date, other_avos, small_haas, large_haas, xlarge_haas)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- by_size %>%
gather(
key = type_of_avo,
value = size,
other_avos, small_haas, large_haas, xlarge_haas
)
# Using `size_gathered`, compute the average sales volume of each size
# (hint, first `group_by` size, then compute using `summarize`)
size_gathered %>%
group_by(type_of_avo) %>%
summarize(
average = mean(size)
)
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- avocados %>%
gather(
key = type_of_avo,
value = size,
other_avos, small_haas, large_haas, xlarge_haas
)
# Using `size_gathered`, compute the average sales volume of each size
# (hint, first `group_by` size, then compute using `summarize`)
size_gathered %>%
group_by(type_of_avo) %>%
summarize(
average = mean(size)
)
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
View(size_gathered)
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = Total.volume, col = size), se = F)
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = Total.Volume, col = size), se = F)
by_type <- avocados %>%
group_by(Date, type)
by_type <- avocados %>%
group_by(Date, type) %>%
summarize(
sumTV = sum(Total.Volume)
)
by_type <- avocados %>%
group_by(Date, type) %>%
summarize(
sumTV = sum(Total.Volume)
)
View(by_type)
by_type_wide <- by_type %>%
spread(
key = type,
value = sumTV
)
View(by_type_wide)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("dplyr")
library("httr")
library("jsonlite")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/users/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
content <- content(response, "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
content <- content(response, "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
content <- content(response, "text")
content <- content(response, "text")
body <- content(response, "text")
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
body <- content(response, "text")
is.data.frame(body)
View(body)
names(body)
body <- content(response, "text")
?content
View(body)
fromJSON(body)
from_json <- fromJSON(body)
View(from_json)
# How many (public) repositories does the organization have?
from_json %>%
filter(private == FALSE) %>%
nrow()
# How many (public) repositories does the organization have?
num_public <- from_json %>%
filter(private == FALSE) %>%
nrow()
num_public
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- from_json %>%
names()
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
from_json %>%
names()
View(from_json)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
body <- content(response, "text")
from_json <- fromJSON(body)
View(from_json)
# How many (public) repositories does the organization have?
num_public <- from_json %>%
filter(private == FALSE) %>%
nrow()
num_public
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "puppies"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
from_json(query)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
fromJSON(query)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
fromJSON(query, "text")
get_content <- content(query, "text")
fromJSON(get_content)
puppies <- fromJSON(get_content)
View(puppies)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
names(puppies)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "University of Washinton"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
get_content <- content(query, "text")
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "snow"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "informatics"
get_content <- content(query, "text")
puppies <- fromJSON(get_content)
View(puppies)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "emojis"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "puppies"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "q=informatics"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?informatics"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
get_content <- content(query, "text")
puppies <- fromJSON(get_content)
View(puppies)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?puppies"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?emojis"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?stars:1000"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?stars:1000"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?q=stars:1000"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
get_content <- content(query, "text")
puppies <- fromJSON(get_content)
stars <- fromJSON(get_content)
View(puppies)
View(stars)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "?q=stars:100"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
query <- GET(paste0(base_uri, search_endpoint, query_params))
print(query)
get_content <- content(query, "text")
stars <- fromJSON(get_content)
View(stars)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
names(stars)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
stars$items
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
items <- stars$items
is.data.frame((items))
View(items)
names(items)
nrow(items)
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items$names[1,5]
top_five
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items %>%
select(names)
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items #%>%
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items %>%
select(names)
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items %>%
select(names)
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items %>%
select(name)
#30
# What are the full names of the top 5 repos in the search results?
top_five <- items %>%
select(name) %>%
c(1:5)
top_five
#30
# What are the full names of the top 5 repos in the search results?
top_five <- c(items[items$name, ])
top_five
#30
# What are the full names of the top 5 repos in the search results?
?index
#30
# What are the full names of the top 5 repos in the search results?
?index()
#30
# What are the full names of the top 5 repos in the search results?
items[items$name[1:5], items$name]
#30
# What are the full names of the top 5 repos in the search results?
items[items$name[1], items$name]
#30
# What are the full names of the top 5 repos in the search results?
items[items$name[1], ]
items %>%
select(name)
items %>%
select(name) %>%
filter(index(<5))
items %>%
select(name) %>%
filter(index(1:5))
items %>%
select(name) %>%
filter([1])
items[3, 1:5]
items[1:5, 3]
items[1:6, 3]
top_five <- items[1:5, 3]
