status <- FALSE
}
print(status)
}
date_has_passed("01/12/2019")
date_has_passed("01/25/2019")
as.Date("01/23/2019", "%m/%d/%y")- as.Date(01/12/2019,"%m/%d/%y")
as.Date("01/23/2019", "%m/%d/%y")- as.Date("01/12/2019","%m/%d/%y")
date_has_passed <- function(date) {
if (as.Date("01/23/2019", "%m/%d/%y")- as.Date(date,"%m/%d/%y") > 0){
status <- TRUE
} else {
status <- FALSE
}
print(status)
}
date_has_passed("01/25/2019")
date_has_passed("01/12/2019")
date_has_passed <- function(date) {
if (as.Date("01/22/2019", "%m/%d/%y")- as.Date(date,"%m/%d/%y") > 0){
status <- TRUE
} else {
status <- FALSE
}
print(status)
}
date_has_passed("01/23/2019")
date_passed_this_year < function(date) {
formatted_date <- format(date, "%m/%d/19")
date_has_passed(formatted_date)
}
date_passed_this_year <- function(date) {
formatted_date <- format(date, "%m/%d/19")
date_has_passed(formatted_date)
}
date_passed_this_year("08/05/2000")
date_passed_this_year <- function(date) {
formatted_date <- format(date, "%m/%d/2019")
date_has_passed(formatted_date)
}
date_passed_this_year("08/05/2000")
date_has_passed <- function(date) {
if (as.Date("01/22", "%m/%d")- as.Date(date,"%m/%d") > 0){
status <- TRUE
} else {
status <- FALSE
}
print(status)
}
date_has_passed("01/23")
date_has_passed("01/23/2018")
date_has_passed("01/23/2017")
date_has_passed("01/23/2020")
date_has_passed("01/20/2020")
date_has_passed("01/23/2019")
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement <- function(name, date) {
N <- as.Date("01/22", "%m/%d")- as.Date(date,"%m/%d")
announcement <- paste(name, "'s birthday is in", N, "days.")
}
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement <- function(name, date) {
N <- as.Date("01/22", "%m/%d")- as.Date(date,"%m/%d")
print(paste(name, "'s birthday is in", N, "days."))
}
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement <- function(name, date) {
N <- as.Date(date,"%m/%d") -as.Date("01/22", "%m/%d")
print(paste(name, "'s birthday is in", N, "days."))
}
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement <- function(name, date) {
N <- as.Date(date,"%m/%d") -as.Date("01/22", "%m/%d")
if (date_has_passed(date)){
N + 365
print(paste(name, "'s birthday is in", N, "days."))
}else {
print(paste(name, "'s birthday is in", N, "days."))
}
}
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement("Ally", "01/05")
make_birthday_announcement <- function(name, date) {
N <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%2019")
if (date_has_passed(date)){
N + 365
print(paste(name, "'s birthday is in", N, "days."))
}else {
print(paste(name, "'s birthday is in", N, "days."))
}
}
make_birthday_announcement("Ally", "01/05")
make_birthday_announcement("Ally", "11/05")
make_birthday_announcement <- function(name, date) {
N <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/2019")
if (date_has_passed(date)){
N + 365
print(paste(name, "'s birthday is in", N, "days."))
}else {
print(paste(name, "'s birthday is in", N, "days."))
}
}
make_birthday_announcement("Ally", "11/05")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/2019")
if (date_has_passed(date)){
num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "11/05")
as.Date("11/05","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/2019")
as.Date("11/05/2019","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/2019")
as.Date("11/05/2019","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
as.Date("01/05/2019","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "11/05/2019")
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date) == TRUE){
num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "01/05/2019")
(as.Date("01/22", "%m/%d")- as.Date(01/05,"%m/%d")
)
(as.Date("01/22", "%m/%d")- as.Date(date,"%m/%d"))
(as.Date("01/22", "%m/%d")- as.Date(01/05,"%m/%d"))
date_has_passed <- function(date) {
if (as.Date("01/22", "%m/%d")- as.Date(date,"%m/%d") > 0){
status <- TRUE
} else {
status <- FALSE
}
print(status)
}
date_has_passed("01/23/2019")
date_has_passed("01/05/2019")
date_has_passed("01/05/2019") == TRUE
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days <- num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days <- -num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days <- num_days + 365
print(paste(name, "'s birthday is in", num_days, "days."))
}else {
print(paste(name, "'s birthday is in", num_days, "days."))
}
}
make_birthday_announcement("Ally", "01/05/2019")
make_birthday_announcement("Ally", "08/05/2019")
?mapply
bday_annoucements <- mapply(birthdays2019, make_birthday_announcement(birthdays2019))
birthdays2019
bday_annoucements <- mapply(make_birthday_announcement("Ally", birthdays2019$Ally))
birthdays_2019 <- list(
format(birthdays$Ally, "%m/%d/19"),
format(birthdays$Michael, "%m/%d/19"),
format(birthdays$Jordan, "%m/%d/19"),
format(birthdays$Paul, "%m/%d/19"),
format(birthdays$Laurie, "%m/%d/19")
)
print(birthdays_2019)
mapply(make_birthday_announcement("Ally", birthdays_2019$Ally))
birthdays_2019$Ally
birthdays_2019
bday_annoucements <- list(
make_birthday_announcement("Ally", birthdays_2019$Ally)
)
bday_annoucements <- list(
make_birthday_announcement("Ally", "birthdays_2019$Ally")
)
birthdays_2019$Ally
birthdays_2019
birthdays_2019 <- list(
Ally = format(birthdays$Ally, "%m/%d/19"),
format(birthdays$Michael, "%m/%d/19"),
format(birthdays$Jordan, "%m/%d/19"),
format(birthdays$Paul, "%m/%d/19"),
format(birthdays$Laurie, "%m/%d/19")
)
birthdays_2019
birthdays_2019 <- list(
Ally = format(birthdays$Ally, "%m/%d/19"),
Michael = format(birthdays$Michael, "%m/%d/19"),
Jordan = format(birthdays$Jordan, "%m/%d/19"),
Paul = format(birthdays$Paul, "%m/%d/19"),
Laurie = format(birthdays$Laurie, "%m/%d/19")
)
print(birthdays_2019)
birthdays_2019$Ally
bday_annoucements <- list(
make_birthday_announcement("Ally", birthdays_2019$Ally)
)
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement("Ally", birthdays_2019$Ally)
birthdays_2019$Ally
make_birthday_announcement("Ally", "08/05/2019")
bday_annoucements <- list(
make_birthday_announcement("Ally", birthdays_2019$Ally),
make_birthday_announcement("Michael", birthdays_2019$Michael)
)
make_birthday_announcement("Michael", birthdays_2019$Michael)
birthdays_2019$Michael
make_birthday_announcement("Michael", "04/02/19")
as.Date("04/02/19","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
as.Date("01/22/19","%m/%d/%y") -as.Date("04/02/2019", "%m/%d/%y")
as.Date("01/22/2019","%m/%d/%y") -as.Date("04/02/2019", "%m/%d/%y")
as.Date("04/02/2019","%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
birthdays_2019$Ally
birthdays_2019 <- list(
Ally = format(birthdays$Ally, "%m/%d/2019"),
Michael = format(birthdays$Michael, "%m/%d/2019"),
Jordan = format(birthdays$Jordan, "%m/%d/2019"),
Paul = format(birthdays$Paul, "%m/%d/2019"),
Laurie = format(birthdays$Laurie, "%m/%d/2019")
)
bday_annoucements <- list(
make_birthday_announcement("Ally", birthdays_2019$Ally),
make_birthday_announcement("Michael", birthdays_2019$Michael)
)
bday_annoucements <- list(
make_birthday_announcement("Ally", birthdays_2019$Ally),
make_birthday_announcement("Michael", birthdays_2019$Michael),
make_birthday_announcement("Jordan", birthdays_2019$Jordan),
make_birthday_announcement("Paul", birthdays_2019$Paul),
make_birthday_announcement("Laurie", birthdays_2019$Laurie)
)
make_birthday_announcement("Ally", "08/05/2019")
make_birthday_announcement <- function(name, date) {
num_days <- as.Date(date,"%m/%d/%y") -as.Date("01/22/2019", "%m/%d/%y")
if (date_has_passed(date)){
num_days <- num_days + 365
print(paste0(name, "'s birthday is in ", num_days, " days."))
}else {
print(paste0(name, "'s birthday is in ", num_days, " days."))
}
}
make_birthday_announcement("Ally", "08/05/2019")
birthdays_2019 <- lapply(birthdays, format, "%m/%d/2019")
print(birthdays_2019)
bday_annoucements <- mapply(birthdays_2019, make_birthday_announcement)
bday_annoucements <- mapply(make_birthday_announcement, "Ally", birthdays_2019)
birthdays_2019 <- lapply(birthdays, format, "%m/%d/2019")
print(birthdays_2019)
bday_annoucements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
as.vector(bday_annoucements)
install.packages("styler")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
salary_2017
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employess, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salary_2017 + salary_adjustments
View(salaries)
salaries$got_raise <- salary_adjustments > 0
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
salaries$salaries_2018[57]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE, ]
# How many employees got a raise?
nchar(salaries[salaries$got_raise == TRUE, ])
# How many employees got a raise?
count(salaries[salaries$got_raise == TRUE, ])
# How many employees got a raise?
salaries[salaries$got_raise, ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise, ])
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments),  ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees" ]
getwd()
setwd("~/Desktop/bookex/chapter-10-exercises/exercise-4")
getwd()
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
grants
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- colnames(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
colnames(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- colnames(grants$organization)
organization
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[[organization]]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <-grants[["organization"]]
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[, grants$total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), ]
# Which organization received the largest grant?
grants[ ,total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
grants[ ,grants$total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
grants["grant title" ,grants$total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
grants[[grants$total_amount == max(grants$total_amount)]
# Which organization received the largest grant?
grants[[grants$total_amount == max(grants$total_amount)]]
# Which organization received the largest grant?
grants[ ,total_amount == max(grants$total_amount)]
grants[ , "total_amount"]
grants[ , "total_amount" == max(grants$total_amount)]
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
grants[ , "total_amount" == 1000000]
grants[ , grants$total_amount == 1000000]
# Which organization received the largest grant?
grants[, grants$total_amount == 1000000]
# Which organization received the largest grant?
grants[, total_amount == 1000000]
# Which organization received the largest grant?
grants[ , grants$total_amount]
# Which organization received the largest grant?
grants[ , total_amount]
# Which organization received the largest grant?
grants[ , colnames(total_amount)]
# Which organization received the largest grant?
grants[ , "total_amount"]
# Which organization received the largest grant?
grants[ , "total_amount" == max(grants$total_amount) ]
grants[255, "id"]
grants[255, "organization"]
# Which organization received the smallest grant?
grants[ , "total_amount" == min(grants$total_amount)]
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# Which organization received the largest grant?
grants[ , "total_amount" == max(grants$total_amount) ]
# Which organization received the smallest grant?
grants[ , "total_amount" == min(grants$total_amount)]
# Which organization received the largest grant?
grants[ , grants$total_amount == max(grants$total_amount) ]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees" ]
# Which organization received the largest grant?
grants["organization" , grants$total_amount == max(grants$total_amount) ]
# Which organization received the largest grant?
grants[ ,grants$total_amount == max(grants$total_amount) ]
grants[total_amount]
grants[grants$total_amount]
grants[ ,grants$total_amount]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees" ]
# What was the largest decrease in salaries between the two years?
min(salaries$salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == min(salaries$salary_adjustments), "employees" ]
# What was the average salary change?
mean(salaries$salary_adjustments)
if(salaries$salary_adjustments < 0){
mean(salary_adjustments)
}
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,salaries$got_raise == FALSE]
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,salaries$got_raise]
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,"got_raise" == FALSE]
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,"got_raise"]
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,"got_raise" == FALSE]
# For people who did not get a raise, how much money did they lose on average?
salaries[ ,c("got_raise" == FALSE)]
# For people who did not get a raise, how much money did they lose on average?
salaries[FALSE , "got_raise"]
# For people who did not get a raise, how much money did they lose on average?
salaries[ , "got_raise"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise, ])
# For people who did not get a raise, how much money did they lose on average?
salaries[ , salaries$got_raise == FALSE ]
# For people who did not get a raise, how much money did they lose on average?
ncol(salaries[ , salaries$got_raise == FALSE ])
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == FALSE, ]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$got_raise == FALSE, ])
# For people who did not get a raise, how much money did they lose on average?
no_raise <- c(salaries[salaries$got_raise == FALSE, ])
mean(no_raise$salary_adjustments)
# What was the average salary change?
mean(salaries$salary_adjustments)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), ]
largest_grant$organization
# Which organization received the largest grant?
largest_grant <- c(grants[grants$total_amount == max(grants$total_amount), ])
largest_grant$organization
# Which organization received the smallest grant?
grants["total_amount" == min(grants$total_amount), ]
# Which organization received the smallest grant?
smallest_grant <- c(grants["total_amount" == min(grants$total_amount), ])
smallest_grant$organization
# Which organization received the smallest grant?
smallest_grant <- c(grants["total_amount" == min(grants$total_amount), ])
smallest_grant
# Which organization received the smallest grant?
smallest_grant <- c(grants[grants$total_amount == min(grants$total_amount), ])
smallest_grant$organization
# How many grants were awarded in 2010?
nrows(grants)
# How many grants were awarded in 2010?
nrow(grants)
